{"version":3,"sources":["components/AddToDo/AddToDo.js","components/AddToDo/index.js","components/RemoveChecked/RemoveChecked.js","components/RemoveChecked/index.js","components/DisplayToDos/Todo.js","components/DisplayToDos/DisplayToDos.js","components/DisplayToDos/index.js","components/TodoList/TodoList.js","components/TodoList/index.js","App.js","reportWebVitals.js","index.js"],"names":["styles","container","width","form","display","justifyContent","marginBottom","textInput","padding","border","todoButton","color","backgroundColor","fontSize","marginLeft","AddToDo","_ref","database","setDatabase","_useState","useState","_useState2","Object","slicedToArray","newTodo","setNewTodo","react_default","a","createElement","style","type","placeholder","onChange","event","persist","target","value","savingNewTodo","onClick","preventDefault","concat","toConsumableArray","id","nanoid","data","isChecked","addTodoToDatabase","className","button","alignItems","marginTop","p","margin","paddingRight","RemovedChecked","borderBottom","list","borderRadius","textDecoration","Todo","todo","isEdit","setIsEdit","console","log","checked","newDatabase","map","databaseTodo","handleChangeCheckbox","newData","copyDatabase","i","length","push","handleChangeTodoData","onKeyDown","key","handlePressEnterKey","filter","handleDeleteTodo","flexDirection","DisplayToDos","item","index","DisplayToDos_Todo","components_RemoveChecked","background","maxWidth","TodoList","components_AddToDo","components_DisplayToDos","h1","App","components_TodoList","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.abf36a90.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { nanoid } from 'nanoid'\n\nfunction AddToDo({database, setDatabase}) {\n    const [newTodo, setNewTodo] = useState('');\n    \n    const savingNewTodo = (event) => {\n        event.persist()\n        setNewTodo(event.target.value)\n    }\n    \n    const addTodoToDatabase = (event,newTodo) => {\n        event.preventDefault()\n        setDatabase([...database,{id: nanoid(), data: newTodo, isChecked: false}])\n    }\n    // console.log('newTodo', newTodo);\n    // console.log('database', database);\n    return (\n        <div style={styles.container}>\n            <form style={styles.form}>\n                <input \n                    style={styles.textInput} \n                    type='text' \n                    placeholder='What needs to be done?' \n                    onChange={(event) => savingNewTodo(event)}\n                />\n                <button \n                    style={styles.todoButton}  \n                    value='+'\n                    onClick={(event) => addTodoToDatabase(event,newTodo)}\n                >\n                <i className=\"fas fa-plus\"></i>\n                </button> \n            </form>\n        </div>\n    )\n}\nconst styles = {\n    container: {\n        width: '100%',\n    },\n    form: {\n        width: '100%',\n        display: 'flex',\n        justifyContent: 'space-between',\n        marginBottom: '10px',\n        \n    },\n    textInput: {\n        width: '240px',\n        padding: '10px',\n        border: 'solid 2px powderblue',\n        \n    },\n    todoButton: {\n        color: 'white',\n        backgroundColor: '#4e93bd',\n        border: 'none',\n        fontSize: '13px',\n        padding: '12px',\n        marginLeft: '5px' \n    }\n}\nexport default AddToDo;\n","import AddToDo from './AddToDo';\n\nexport default AddToDo;","import React from 'react';\n\nfunction RemovedChecked() {\n    return (\n        <div style={styles.container}>\n            <button style={styles.button}>\n                <p style={styles.p}>Remove Checked</p>\n                <i className=\"fas fa-times\"></i>\n            </button>\n        </div>\n    )\n}\n\nconst styles = {\n    container: {\n        display: 'flex',\n        justifyContent: 'flex-end'\n    },\n    button: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        alignItems: 'center',\n        marginTop: '20px',\n        padding: '5px 10px',\n        color: 'white',\n        backgroundColor: '#4e93bd',\n        border: 'none'\n    },\n    p: {\n        margin: '0',\n        paddingRight: '10px'\n    }\n}\nexport default RemovedChecked","import RemovedChecked from './RemoveChecked'\n\nexport default RemovedChecked","import React, { useState } from 'react'\n\n\nfunction Todo({ todo, database, setDatabase }) {\n    const [isEdit, setIsEdit] = useState(false);\n\n    const handleDeleteTodo = (id) => {\n        //delete this todo that clicked\n        //setDatabase will exclude this todo\n        const newDatabase = database.filter(todo => (todo.id !== id));\n        setDatabase(newDatabase);\n        //{id: kfsfkls, data: make rice, isCheck: false} !== kfsfkls\n\n    }\n\n        // user click checkbox \n        // if checkbox is unchecked switch isChecked to false, textDecoration is none\n        // if checkbox is checked switch isChecked to true and change textDecoration to \n        // line-throught\n    const handleChangeCheckbox = () => { \n        // const copyDatabase = [...database];\n        // for(let i = 0; i < copyDatabase.length; i++) {\n        //     if(copyDatabase[i].id === todo.id) {\n        //         copyDatabase[i].isChecked = !copyDatabase[i].isChecked;\n        //     }\n        // } \n        // console.log('copyDatabase', copyDatabase)\n        // setDatabase(copyDatabase)\n        const newDatabase = database.map(databaseTodo => { //databaseTodo is element in database[]\n            if(databaseTodo.id === todo.id) {\n                databaseTodo.isChecked = !databaseTodo.isChecked \n            }\n            return databaseTodo\n        })\n        setDatabase(newDatabase)\n    }\n    console.log('database', database)\n\n    // user click edit icon, change <p></p> to input textbox DONE\n    // user type in textbox, change value in database DONE\n    // user press Enter, change input textbox to <p></p>\n  \n   const handleOnClickEdit = () => {\n        setIsEdit(true);\n   }\n   \n   const handleChangeTodoData = (event, id) => {\n        const newData = event.target.value;\n        const copyDatabase = [...database];\n        let newDatabase = [];\n        for (let i = 0; i < copyDatabase.length; i++) {\n            if(copyDatabase[i].id === id) {\n                copyDatabase[i].data = newData;\n            } \n            newDatabase.push(copyDatabase[i]);\n        }\n        console.log(\"newData1\", newDatabase); \n        setDatabase(newDatabase)\n   }\n   const handlePressEnterKey = (event) => {\n       if(event.key === \"Enter\") setIsEdit(false)\n   }\n    \n\n    return (\n        <div style={styles.container}>\n            <div style={styles.list}>\n                <input \n                type='checkbox' \n                checked= {todo.isChecked}\n                onChange={() => handleChangeCheckbox()}/>\n                {isEdit ?  \n                <input type=\"textbox\" value={todo.data} \n                onChange={(event) => handleChangeTodoData(event, todo.id)}\n                onKeyDown={(event) => handlePressEnterKey(event)}/> \n                : \n                <p style={{textDecoration: todo.isChecked === true ? 'line-through' : 'none'}}>{todo.data}</p>\n                }\n               \n                \n            </div>\n            <div>\n                <button style={styles.button} onClick={() => handleOnClickEdit()}>\n                    <i className=\"fas fa-pencil-alt\"/>\n                </button>\n                <button style={styles.button} onClick={() => handleDeleteTodo(todo.id)}>\n                    <i className=\"far fa-trash-alt\"/>\n                </button>\n            </div>   \n        </div>\n    )\n}\nconst styles ={\n    container: {\n        display: 'flex',\n        alignItems: 'center',\n        width: '100%',\n        justifyContent: 'space-between',\n        borderBottom: 'solid lightgrey 1px'\n        \n    },\n    list: {\n        display: 'flex',\n        alignItems: 'center',\n        margin: '0',\n        \n    },\n    button: {\n        border: 'none',\n        color: 'lightgrey',\n        borderRadius: '5px',\n        fontSize: '20px',\n        margin: '2px',\n        padding: '5px'\n    },\n    p: {\n        textDecoration: 'line-through'\n    }\n}\nexport default Todo;\n","import React from 'react';\nimport RemovedChecked from '../RemoveChecked';\nimport Todo from './Todo';\n\n\nfunction DisplayToDos({database, setDatabase}) {\n    \n    return (\n        <div style={styles.container}>\n            {database.map((item, index) => <Todo todo={item} key={index} database={database} setDatabase={setDatabase} />)}\n            <RemovedChecked />\n        </div>\n    )\n}\nconst styles = {\n    container: {\n        display: 'flex',\n        flexDirection: 'column'\n    }\n}\nexport default DisplayToDos\n","import DisplayToDos from './DisplayToDos';\n\nexport  default DisplayToDos;","import React, { useState } from 'react';\nimport AddToDo from '../AddToDo';\nimport DisplayToDos from '../DisplayToDos';\n\n\n// click delete button\n// that todo will be removed from todo list(database)\n\nfunction TodoList() {\n    const [database, setDatabase] = useState([]);\n    return (\n        <div style={styles.container}>\n            <AddToDo database={database} setDatabase={setDatabase} />\n            <DisplayToDos database={database}  setDatabase={setDatabase} />\n        </div>\n    )\n}\n\nconst styles = {\n    container: { \n        display: 'flex', \n        flexDirection: 'column',\n        padding: '20px',\n        border: '2px solid lightblue',\n        // backgroundImage: 'linear-gradient(to bottom, lightblue, lightyellow)'\n        background: 'white',\n        fontSize: '',\n        maxWidth: '450px'\n    }\n}\n\nexport default TodoList;\n\n","import TodoList from './TodoList'\n\nexport default TodoList;","import React from 'react';\nimport './App.css';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 style={styles.h1}>TODOLIST</h1>\n      <TodoList />\n    </div>\n  );\n}\n\nconst styles = {\n  h1: {\n    fontSize: '25px',\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}