{"version":3,"sources":["components/AddToDo/AddToDo.tsx","components/AddToDo/index.tsx","components/DisplayToDos/Todo.tsx","components/DisplayToDos/DisplayToDos.tsx","components/DisplayToDos/index.tsx","components/RemoveCheckedTodos/RemoveCheckedTodos.tsx","components/RemoveCheckedTodos/index.tsx","components/TodoList/TodoList.tsx","components/TodoList/index.tsx","App.tsx","index.tsx"],"names":["styles","container","width","form","display","justifyContent","marginBottom","textInput","fontSize","paddingLeft","border","outline","addButton","color","backgroundColor","padding","marginLeft","cursor","AddToDo","_ref","database","setDatabase","_useState","useState","_useState2","Object","slicedToArray","newTodo","setNewTodo","console","log","react_default","a","createElement","style","value","type","placeholder","onChange","event","persist","target","savingNewTodo","onClick","preventDefault","concat","toConsumableArray","id","nanoid","data","isChecked","addTodoToDatabase","className","alignItems","borderBottom","list","button","borderRadius","margin","p","textbox","Todo","todo","isEdit","setIsEdit","checked","newDatabase","map","databaseTodo","handleChangeCheckbox","newData","copyDatabase","i","length","push","handleChangeTodoData","onKeyDown","key","handlePressEnterKey","textDecoration","filter","handleDeleteTodo","flexDirection","DisplayToDos","item","index","DisplayToDos_Todo","marginTop","paddingRight","RemoveCheckedTodos","filteredTodos","handleRemoveAllChecked","boxShadow","background","maxWidth","TodoList","useEffect","JSON","parse","localStorage","getItem","setItem","stringify","today","Date","date","getDate","month","getMonth","ordinalDate","getFullYear","components_AddToDo","components_DisplayToDos","components_RemoveCheckedTodos","h1","textShadow","App","components_TodoList","ReactDOM","render","StrictMode","src_App_0","document","getElementById"],"mappings":"iNAsDMA,EAAS,CACXC,UAAW,CACPC,MAAO,QAEXC,KAAM,CACFD,MAAO,OACPE,QAAS,OACTC,eAAgB,gBAChBC,aAAc,QAElBC,UAAW,CACPC,SAAU,OACVN,MAAO,QACPO,YAAa,OACbC,OAAQ,uBACRC,QAAS,QAEbC,UAAW,CACPC,MAAO,QACPC,gBAAiB,UACjBJ,OAAQ,OACRF,SAAU,OACVO,QAAS,OACTC,WAAY,MACZC,OAAQ,YC5EDC,EDYiB,SAAAC,GAA+B,IAA5BC,EAA4BD,EAA5BC,SAAUC,EAAkBF,EAAlBE,YAAkBC,EAC7BC,mBAAS,IADoBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACpDK,EADoDH,EAAA,GAC3CI,EAD2CJ,EAAA,GAmB3D,OAFAK,QAAQC,IAAI,UAAWH,GACvBE,QAAQC,IAAI,WAAYV,GAEpBW,EAAAC,EAAAC,cAAA,OAAKC,MAAOlC,EAAOC,WACf8B,EAAAC,EAAAC,cAAA,QAAMC,MAAOlC,EAAOG,MAChB4B,EAAAC,EAAAC,cAAA,SACIE,MAAOR,EACPO,MAAOlC,EAAOO,UACd6B,KAAK,UACLC,YAAY,yBACZC,SAAU,SAACC,GAAD,OAvBJ,SAACA,GACnBA,EAAMC,UACNZ,EAAWW,EAAME,OAAON,OAqBSO,CAAcH,MAEvCR,EAAAC,EAAAC,cAAA,UACIC,MAAOlC,EAAOY,UACduB,MAAM,IACNQ,QAAS,SAACJ,GAAD,OAtBC,SAACA,EAA2CZ,GAClEY,EAAMK,iBACNvB,EAAW,GAAAwB,OAAApB,OAAAqB,EAAA,EAAArB,CAAKL,GAAL,CAAe,CAAE2B,GAAIC,cAAUC,KAAMtB,EAASuB,WAAW,MACpEtB,EAAW,IAmBqBuB,CAAkBZ,EAAOZ,KAE7CI,EAAAC,EAAAC,cAAA,KAAGmB,UAAU,oBEuE3BpD,EAAS,CACbC,UAAW,CACTG,QAAS,OACTiD,WAAY,SACZnD,MAAO,OACPG,eAAgB,gBAChBiD,aAAc,uBAEhBC,KAAM,CACJnD,QAAS,OACTiD,WAAY,UAEdG,OAAQ,CACN9C,OAAQ,OACRG,MAAO,YACP4C,aAAc,MACdjD,SAAU,OACVkD,OAAQ,MACR3C,QAAS,MACTE,OAAQ,WAEV0C,EAAG,CACDlD,YAAa,OACbD,SAAU,QAEZoD,QAAS,CACP5C,WAAY,SAGD6C,EAxIe,SAAA1C,GAAqC,IAAlC2C,EAAkC3C,EAAlC2C,KAAM1C,EAA4BD,EAA5BC,SAAUC,EAAkBF,EAAlBE,YAAkBC,EACrCC,oBAAS,GAD4BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAC1DyC,EAD0DvC,EAAA,GAClDwC,EADkDxC,EAAA,GAiEjE,OACEO,EAAAC,EAAAC,cAAA,OAAKC,MAAOlC,EAAOC,WACjB8B,EAAAC,EAAAC,cAAA,OAAKC,MAAOlC,EAAOuD,MACjBxB,EAAAC,EAAAC,cAAA,SACEC,MAAO,CAAEwB,OAAQ,IAAKzC,OAAQ,WAC9BmB,KAAK,WACL6B,QAASH,EAAKZ,UACdZ,SAAU,kBAzDW,WAS3B,IAAM4B,EAAc9C,EAAS+C,IAAI,SAACC,GAKhC,OAHIA,EAAarB,KAAOe,EAAKf,KAC3BqB,EAAalB,WAAakB,EAAalB,WAElCkB,IAET/C,EAAY6C,GAyCUG,MAEjBN,EACChC,EAAAC,EAAAC,cAAA,SACEC,MAAOlC,EAAO4D,QACdxB,KAAK,UACLD,MAAO2B,EAAKb,KACZX,SAAU,SAACC,GAAD,OApCS,SAC3BA,EACAQ,GAKA,IAHA,IAAMuB,EAAU/B,EAAME,OAAON,MACvBoC,EAAY9C,OAAAqB,EAAA,EAAArB,CAAOL,GACrB8C,EAAc,GACTM,EAAI,EAAGA,EAAID,EAAaE,OAAQD,IACnCD,EAAaC,GAAGzB,KAAOA,IACzBwB,EAAaC,GAAGvB,KAAOqB,GAEzBJ,EAAYQ,KAAKH,EAAaC,IAEhC3C,QAAQC,IAAI,WAAYoC,GACxB7C,EAAY6C,GAsBiBS,CAAqBpC,EAAOuB,EAAKf,KACtD6B,UAAW,SAACrC,GAAD,OArBO,SAC1BA,GAEkB,UAAdA,EAAMsC,KAAiBb,GAAU,GAkBPc,CAAoBvC,MAG5CR,EAAAC,EAAAC,cAAA,OAAKC,MAAOlC,EAAO2D,GACjB5B,EAAAC,EAAAC,cAAA,KACEC,MAAO,CACL6C,gBACqB,IAAnBjB,EAAKZ,UAAqB,eAAiB,SAG9CY,EAAKb,QAKdlB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQC,MAAOlC,EAAOwD,OAAQb,QAAS,WAxD3CqB,GAAU,KAyDJjC,EAAAC,EAAAC,cAAA,KAAGmB,UAAU,uBAEfrB,EAAAC,EAAAC,cAAA,UAAQC,MAAOlC,EAAOwD,OAAQb,QAAS,kBAhGpB,SAACI,GAGxB,IAAMmB,EAAc9C,EAAS4D,OAAO,SAAClB,GAAD,OAAUA,EAAKf,KAAOA,IAC1D1B,EAAY6C,GA4FqCe,CAAiBnB,EAAKf,MACjEhB,EAAAC,EAAAC,cAAA,KAAGmB,UAAU,yBCjFjBpD,EAAgB,CACpBC,UAAW,CACTG,QAAS,OACT8E,cAAe,WChCHC,EDWsB,SAAAhE,GAA+B,IAA5BC,EAA4BD,EAA5BC,SAAUC,EAAkBF,EAAlBE,YACjD,OACEU,EAAAC,EAAAC,cAAA,OAAKC,MAAOlC,EAAOC,WAChBmB,EAAS+C,IAAI,SAACiB,EAAMC,GAAP,OACZtD,EAAAC,EAAAC,cAACqD,EAAD,CACExB,KAAMsB,EACNP,IAAKQ,EACLjE,SAAUA,EACVC,YAAaA,QEajBrB,EAAgB,CACpBC,UAAW,CACTG,QAAS,OACTC,eAAgB,YAElBmD,OAAQ,CACNpD,QAAS,OACTC,eAAgB,WAChBgD,WAAY,SACZkC,UAAW,OACXxE,QAAS,WACTF,MAAO,QACPC,gBAAiB,UACjBJ,OAAQ,OACRO,OAAQ,WAEV0C,EAAG,CACDD,OAAQ,IACR8B,aAAc,SClDHC,EDU6B,SAAAtE,GAA+B,IAA5BC,EAA4BD,EAA5BC,SAAUC,EAAkBF,EAAlBE,YAQvD,OACEU,EAAAC,EAAAC,cAAA,OAAKC,MAAOlC,EAAOC,WACjB8B,EAAAC,EAAAC,cAAA,UAAQC,MAAOlC,EAAOwD,OAAQb,QAAS,kBANZ,WAC7B,IAAM+C,EAAgBtE,EAAS4D,OAAO,SAAClB,GAAD,OAAWA,EAAKZ,YACtD7B,EAAYqE,GAImCC,KAC3C5D,EAAAC,EAAAC,cAAA,KAAGC,MAAOlC,EAAO2D,GAAjB,wBACA5B,EAAAC,EAAAC,cAAA,KAAGmB,UAAU,oBEqDfpD,EAAgB,CACpBC,UAAW,CACTG,QAAS,OACT8E,cAAe,SACfnE,QAAS,sBACT6E,UAAW,mBACXC,WAAY,QACZrF,SAAU,GACVsF,SAAU,UCnFCC,EDeY,WAAM,IAAAzE,EACCC,mBAA4B,IAD7BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACxBF,EADwBI,EAAA,GACdH,EADcG,EAAA,GAG/BwE,oBAAU,WACR,IAAM5E,EAAW6E,KAAKC,MAAMC,aAAaC,QAAQ,aAAe,MAC5DhF,GACFC,EAAYD,IAEb,IAEH4E,oBAAU,WAERG,aAAaE,QAAQ,WAAYJ,KAAKK,UAAUlF,KAC/C,CAACA,IAEJ,IAaMmF,EAAQ,IAAIC,KACZC,EAAOF,EAAMG,UACbC,EAAQ,CACZ,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YACAJ,EAAMK,YAER,OACE7E,EAAAC,EAAAC,cAAA,OAAKC,MAAOlC,EAAOC,WACjB8B,EAAAC,EAAAC,cAAA,UACGwE,EACD1E,EAAAC,EAAAC,cAAA,WAlCc,SAACwE,GACnB,GAAIA,EAAO,GAAKA,EAAO,GAAI,MAAO,KAClC,OAAQA,EAAO,IACb,KAAK,EACH,MAAO,KACT,KAAK,EACH,MAAO,KACT,KAAK,EACH,MAAO,KACT,QACE,MAAO,MAwBDI,CAAYJ,IAFpB,IAEkCE,EAFlC,KAE2CJ,EAAMO,eAEjD/E,EAAAC,EAAAC,cAAC8E,EAAD,CAAS3F,SAAUA,EAAUC,YAAaA,IAC1CU,EAAAC,EAAAC,cAAC+E,EAAD,CAAc5F,SAAUA,EAAUC,YAAaA,IAC/CU,EAAAC,EAAAC,cAACgF,EAAD,CAAoB7F,SAAUA,EAAUC,YAAaA,MEzDrDrB,EAAS,CACbkH,GAAI,CACF1G,SAAU,OACVK,MAAO,QACPsG,WAAY,qBAIDC,EAjBM,WACnB,OACErF,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,OACbrB,EAAAC,EAAAC,cAAA,MAAIC,MAAOlC,EAAOkH,IAAlB,aACAnF,EAAAC,EAAAC,cAACoF,EAAD,QCHNC,IAASC,OACPxF,EAAAC,EAAAC,cAACF,EAAAC,EAAMwF,WAAP,KACEzF,EAAAC,EAAAC,cAACwF,EAAD,OAEFC,SAASC,eAAe","file":"static/js/main.a3143b9d.chunk.js","sourcesContent":["import React, { useState,Dispatch, SetStateAction} from 'react'\nimport { nanoid } from 'nanoid'\n\n\ninterface Props {\n    database: TodoType[];\n    setDatabase:  Dispatch<SetStateAction<TodoType[]>>;\n}\ntype TodoType = {\n    id: string;\n    data: string;\n    isChecked: boolean;\n}\n\nconst AddToDo:React.FC<Props> = ({ database, setDatabase }) => {\n    const [newTodo, setNewTodo] = useState('');\n\n\n    const savingNewTodo = (event:React.ChangeEvent<HTMLInputElement>) => {\n        event.persist()\n        setNewTodo(event.target.value)\n    }\n    //set input to emty/placeholder\n\n    const addTodoToDatabase = (event:React.MouseEvent<HTMLButtonElement>, newTodo: string) => {\n        event.preventDefault()\n        setDatabase([...database, { id: nanoid(), data: newTodo, isChecked: false }])\n        setNewTodo('');\n    }\n\n\n    console.log('newTodo', newTodo);\n    console.log('database', database);\n    return (\n        <div style={styles.container}>\n            <form style={styles.form}>\n                <input\n                    value={newTodo}\n                    style={styles.textInput}\n                    type='textbox'\n                    placeholder='What needs to be done?'\n                    onChange={(event) => savingNewTodo(event)}\n                />\n                <button\n                    style={styles.addButton}\n                    value='+'\n                    onClick={(event) => addTodoToDatabase(event, newTodo)}\n                >\n                    <i className=\"fas fa-plus\" />\n                </button>\n            </form>\n        </div>\n    )\n}\nconst styles = {\n    container: {\n        width: '100%',\n    },\n    form: {\n        width: '100%',\n        display: 'flex',\n        justifyContent: 'space-between',\n        marginBottom: '10px',\n    },\n    textInput: {\n        fontSize: '16px',\n        width: '240px',\n        paddingLeft: '10px',\n        border: 'solid 2px powderblue',\n        outline: 'none'\n    },\n    addButton: {\n        color: 'white',\n        backgroundColor: '#4e93bd',\n        border: 'none',\n        fontSize: '13px',\n        padding: '12px',\n        marginLeft: '5px',\n        cursor: 'pointer'\n    }\n}\nexport default AddToDo;\n","import AddToDo from './AddToDo';\n\nexport default AddToDo;","import React, { useState, Dispatch, SetStateAction } from \"react\";\n\ninterface Props {\n  database: TodoType[];\n  setDatabase: Dispatch<SetStateAction<TodoType[]>>;\n  todo: any;\n}\ntype TodoType = {\n  id: string;\n  data: string;\n  isChecked: boolean;\n};\nconst Todo: React.FC<Props> = ({ todo, database, setDatabase }) => {\n  const [isEdit, setIsEdit] = useState(false);\n\n  const handleDeleteTodo = (id: string) => {\n    //delete this todo that clicked\n    //setDatabase will exclude this todo\n    const newDatabase = database.filter((todo) => todo.id !== id);\n    setDatabase(newDatabase);\n    //{id: kfsfkls, data: make rice, isCheck: false} !== kfsfkls\n  };\n\n  // user click checkbox\n  // if checkbox is unchecked switch isChecked to false, textDecoration is none\n  // if checkbox is checked switch isChecked to true and change textDecoration to\n  // line-throught\n  const handleChangeCheckbox = () => {\n    // const copyDatabase = [...database];\n    // for(let i = 0; i < copyDatabase.length; i++) {\n    //     if(copyDatabase[i].id === todo.id) {\n    //         copyDatabase[i].isChecked = !copyDatabase[i].isChecked;\n    //     }\n    // }\n    // console.log('copyDatabase', copyDatabase)\n    // setDatabase(copyDatabase)\n    const newDatabase = database.map((databaseTodo) => {\n      //databaseTodo is element in database[]\n      if (databaseTodo.id === todo.id) {\n        databaseTodo.isChecked = !databaseTodo.isChecked;\n      }\n      return databaseTodo;\n    });\n    setDatabase(newDatabase);\n  };\n  // console.log('database', database)\n\n  // user click edit icon, change <p></p> to input textbox DONE\n  // user type in textbox, change value in database DONE\n  // user press Enter, change input textbox to <p></p>\n\n  const handleOnClickEdit = () => {\n    setIsEdit(true);\n  };\n\n  const handleChangeTodoData = (\n    event: React.ChangeEvent<HTMLInputElement>,\n    id: string\n  ) => {\n    const newData = event.target.value;\n    const copyDatabase = [...database];\n    let newDatabase = [];\n    for (let i = 0; i < copyDatabase.length; i++) {\n      if (copyDatabase[i].id === id) {\n        copyDatabase[i].data = newData;\n      }\n      newDatabase.push(copyDatabase[i]);\n    }\n    console.log(\"newData1\", newDatabase);\n    setDatabase(newDatabase);\n  };\n  const handlePressEnterKey = (\n    event: React.KeyboardEvent<HTMLInputElement>\n  ) => {\n    if (event.key === \"Enter\") setIsEdit(false);\n  };\n\n  return (\n    <div style={styles.container}>\n      <div style={styles.list}>\n        <input\n          style={{ margin: \"0\", cursor: \"pointer\" }}\n          type=\"checkbox\"\n          checked={todo.isChecked}\n          onChange={() => handleChangeCheckbox()}\n        />\n        {isEdit ? (\n          <input\n            style={styles.textbox}\n            type=\"textbox\"\n            value={todo.data}\n            onChange={(event) => handleChangeTodoData(event, todo.id)}\n            onKeyDown={(event) => handlePressEnterKey(event)}\n          />\n        ) : (\n          <div style={styles.p}>\n            <p\n              style={{\n                textDecoration:\n                  todo.isChecked === true ? \"line-through\" : \"none\",\n              }}\n            >\n              {todo.data}\n            </p>\n          </div>\n        )}\n      </div>\n      <div>\n        <button style={styles.button} onClick={() => handleOnClickEdit()}>\n          <i className=\"fas fa-pencil-alt\" />\n        </button>\n        <button style={styles.button} onClick={() => handleDeleteTodo(todo.id)}>\n          <i className=\"far fa-trash-alt\" />\n        </button>\n      </div>\n    </div>\n  );\n};\n\nconst styles = {\n  container: {\n    display: \"flex\",\n    alignItems: \"center\",\n    width: \"100%\",\n    justifyContent: \"space-between\",\n    borderBottom: \"solid lightgrey 1px\",\n  },\n  list: {\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  button: {\n    border: \"none\",\n    color: \"lightgrey\",\n    borderRadius: \"5px\",\n    fontSize: \"20px\",\n    margin: \"2px\",\n    padding: \"5px\",\n    cursor: \"pointer\",\n  },\n  p: {\n    paddingLeft: \"10px\",\n    fontSize: \"16px\",\n  },\n  textbox: {\n    marginLeft: \"10px\",\n  },\n};\nexport default Todo;\n","import React, { Dispatch, SetStateAction } from \"react\";\nimport Todo from \"./Todo\";\nimport CSS from \"csstype\";\n\ninterface Props {\n  database: TodoType[];\n  setDatabase: Dispatch<SetStateAction<TodoType[]>>;\n}\ntype TodoType = {\n  id: string;\n  data: string;\n  isChecked: boolean;\n};\nconst DisplayToDos: React.FC<Props> = ({ database, setDatabase }) => {\n  return (\n    <div style={styles.container}>\n      {database.map((item, index) => (\n        <Todo\n          todo={item}\n          key={index}\n          database={database}\n          setDatabase={setDatabase}\n        />\n      ))}\n    </div>\n  );\n};\n\ntype Style = {\n  container: CSS.Properties;\n};\nconst styles: Style = {\n  container: {\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n};\nexport default DisplayToDos;\n","import DisplayToDos from './DisplayToDos';\n\nexport  default DisplayToDos;","import React, { Dispatch, SetStateAction } from \"react\";\nimport CSS from \"csstype\";\n\ninterface Props {\n  database: TodoType[];\n  setDatabase: Dispatch<SetStateAction<TodoType[]>>;\n}\ntype TodoType = {\n  id: string;\n  data: string;\n  isChecked: boolean;\n};\nconst RemoveCheckedTodos: React.FC<Props> = ({ database, setDatabase }) => {\n  // user click \"Remove Checked\" button\n  // check isChecked === true\n  // remove todo that isChecked === true\n  const handleRemoveAllChecked = () => {\n    const filteredTodos = database.filter((todo) => !todo.isChecked);\n    setDatabase(filteredTodos);\n  };\n  return (\n    <div style={styles.container}>\n      <button style={styles.button} onClick={() => handleRemoveAllChecked()}>\n        <p style={styles.p}>Remove Checked Tasks</p>\n        <i className=\"fas fa-times\" />\n      </button>\n    </div>\n  );\n};\ntype Style = {\n  container: CSS.Properties;\n  button: CSS.Properties;\n  p: CSS.Properties;\n};\nconst styles: Style = {\n  container: {\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n  },\n  button: {\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n    alignItems: \"center\",\n    marginTop: \"20px\",\n    padding: \"5px 10px\",\n    color: \"white\",\n    backgroundColor: \"#4e93bd\",\n    border: \"none\",\n    cursor: \"pointer\",\n  },\n  p: {\n    margin: \"0\",\n    paddingRight: \"10px\",\n  },\n};\nexport default RemoveCheckedTodos;\n","import RemoveCheckedTodos from './RemoveCheckedTodos'\n\nexport default RemoveCheckedTodos","import React, { useState, useEffect, Dispatch, SetStateAction } from \"react\";\nimport AddToDo from \"../AddToDo\";\nimport DisplayToDos from \"../DisplayToDos\";\nimport RemoveCheckedTodos from \"../RemoveCheckedTodos\";\nimport CSS from \"csstype\";\n\ninterface Props {\n  database: TodoType[];\n  setDatabase: Dispatch<SetStateAction<TodoType[]>>;\n}\ntype TodoType = {\n  id: string;\n  data: string;\n  isChecked: boolean;\n};\n// click delete button\n// that todo will be removed from todo list(database)\nconst TodoList: React.FC = () => {\n  const [database, setDatabase] = useState<Props[\"database\"]>([]);\n\n  useEffect(() => {\n    const database = JSON.parse(localStorage.getItem(\"database\") || \"[]\");\n    if (database) {\n      setDatabase(database);\n    }\n  }, []);\n\n  useEffect(() => {\n    //save database while changing\n    localStorage.setItem(\"database\", JSON.stringify(database));\n  }, [database]);\n\n  const ordinalDate = (date: number) => {\n    if (date > 3 && date < 21) return \"th\";\n    switch (date % 10) {\n      case 1:\n        return \"st\";\n      case 2:\n        return \"nd\";\n      case 3:\n        return \"rd\";\n      default:\n        return \"th\";\n    }\n  };\n  const today = new Date();\n  const date = today.getDate();\n  const month = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ][today.getMonth()];\n\n  return (\n    <div style={styles.container}>\n      <h5>\n        {date}\n        <sup>{ordinalDate(date)}</sup> {month}, {today.getFullYear()}\n      </h5>\n      <AddToDo database={database} setDatabase={setDatabase} />\n      <DisplayToDos database={database} setDatabase={setDatabase} />\n      <RemoveCheckedTodos database={database} setDatabase={setDatabase} />\n    </div>\n  );\n};\ntype Style = {\n  container: CSS.Properties;\n};\nconst styles: Style = {\n  container: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    padding: \" 5px 20px 20px 20px\",\n    boxShadow: \"2px 2px 5px grey\",\n    background: \"white\",\n    fontSize: \"\",\n    maxWidth: \"450px\",\n  },\n};\n\nexport default TodoList;\n","import TodoList from './TodoList'\n\nexport default TodoList;","import React from 'react';\nimport './App.css';\nimport TodoList from './components/TodoList';\n\nconst App:React.FC = () => {\n  return (\n    <div className=\"App\">\n      <h1 style={styles.h1}>TODO LIST</h1>\n      <TodoList />\n    </div>\n  );\n}\n\nconst styles = {\n  h1: {\n    fontSize: '25px',\n    color: 'white',\n    textShadow: '2px 2px 5px grey'\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}