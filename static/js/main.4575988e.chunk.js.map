{"version":3,"sources":["components/AddToDo/AddToDo.js","components/AddToDo/index.js","components/DisplayToDos/Todo.js","components/DisplayToDos/DisplayToDos.js","components/DisplayToDos/index.js","components/RemoveCheckedTodos/RemoveCheckedTodos.js","components/RemoveCheckedTodos/index.js","components/TodoList/TodoList.js","components/TodoList/index.js","App.js","reportWebVitals.js","index.js"],"names":["styles","container","width","form","display","justifyContent","marginBottom","textInput","fontSize","paddingLeft","border","addButton","color","backgroundColor","padding","marginLeft","cursor","AddToDo","_ref","database","setDatabase","_useState","useState","_useState2","Object","slicedToArray","newTodo","setNewTodo","console","log","react_default","a","createElement","style","value","type","placeholder","onChange","event","persist","target","savingNewTodo","onClick","preventDefault","concat","toConsumableArray","id","nanoid","data","isChecked","addTodoToDatabase","className","alignItems","borderBottom","list","button","borderRadius","margin","p","textbox","Todo","todo","isEdit","setIsEdit","checked","newDatabase","map","databaseTodo","handleChangeCheckbox","newData","copyDatabase","i","length","push","handleChangeTodoData","onKeyDown","key","handlePressEnterKey","textDecoration","filter","handleDeleteTodo","flexDirection","DisplayToDos","item","index","DisplayToDos_Todo","marginTop","paddingRight","RemoveCheckedTodos","filteredTodos","handleRemoveAllChecked","boxShadow","background","maxWidth","TodoList","useEffect","JSON","parse","localStorage","getItem","setItem","stringify","components_AddToDo","components_DisplayToDos","components_RemoveCheckedTodos","h1","textShadow","App","components_TodoList","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.4575988e.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { nanoid } from 'nanoid'\n\nfunction AddToDo({ database, setDatabase }) {\n    const [newTodo, setNewTodo] = useState('');\n\n\n    const savingNewTodo = (event) => {\n        event.persist()\n        setNewTodo(event.target.value)\n    }\n    //set input to emty/placeholder\n\n    const addTodoToDatabase = (event, newTodo) => {\n        event.preventDefault()\n        setDatabase([...database, { id: nanoid(), data: newTodo, isChecked: false }])\n        setNewTodo('');\n    }\n\n\n    console.log('newTodo', newTodo);\n    console.log('database', database);\n    return (\n        <div style={styles.container}>\n            <form style={styles.form}>\n                <input\n                    value={newTodo}\n                    style={styles.textInput}\n                    type='textbox'\n                    placeholder='What needs to be done?'\n                    onChange={(event) => savingNewTodo(event)}\n                />\n                <button\n                    style={styles.addButton}\n                    value='+'\n                    onClick={(event) => addTodoToDatabase(event, newTodo)}\n                >\n                    <i className=\"fas fa-plus\" />\n                </button>\n            </form>\n        </div>\n    )\n}\nconst styles = {\n    container: {\n        width: '100%',\n    },\n    form: {\n        width: '100%',\n        display: 'flex',\n        justifyContent: 'space-between',\n        marginBottom: '10px',\n    },\n    textInput: {\n        fontSize: '16px',\n        width: '240px',\n        paddingLeft: '10px',\n        border: 'solid 2px powderblue',\n\n    },\n    addButton: {\n        color: 'white',\n        backgroundColor: '#4e93bd',\n        border: 'none',\n        fontSize: '13px',\n        padding: '12px',\n        marginLeft: '5px',\n        cursor: 'pointer'\n    }\n}\nexport default AddToDo;\n","import AddToDo from './AddToDo';\n\nexport default AddToDo;","import React, { useState } from 'react'\n\nfunction Todo({ todo, database, setDatabase }) {\n    const [isEdit, setIsEdit] = useState(false);\n\n    const handleDeleteTodo = (id) => {\n        //delete this todo that clicked\n        //setDatabase will exclude this todo\n        const newDatabase = database.filter(todo => (todo.id !== id));\n        setDatabase(newDatabase);\n        //{id: kfsfkls, data: make rice, isCheck: false} !== kfsfkls\n\n    }\n\n    // user click checkbox \n    // if checkbox is unchecked switch isChecked to false, textDecoration is none\n    // if checkbox is checked switch isChecked to true and change textDecoration to \n    // line-throught\n    const handleChangeCheckbox = () => {\n        // const copyDatabase = [...database];\n        // for(let i = 0; i < copyDatabase.length; i++) {\n        //     if(copyDatabase[i].id === todo.id) {\n        //         copyDatabase[i].isChecked = !copyDatabase[i].isChecked;\n        //     }\n        // } \n        // console.log('copyDatabase', copyDatabase)\n        // setDatabase(copyDatabase)\n        const newDatabase = database.map(databaseTodo => { //databaseTodo is element in database[]\n            if (databaseTodo.id === todo.id) {\n                databaseTodo.isChecked = !databaseTodo.isChecked\n            }\n            return databaseTodo\n        })\n        setDatabase(newDatabase)\n    }\n    // console.log('database', database)\n\n    // user click edit icon, change <p></p> to input textbox DONE\n    // user type in textbox, change value in database DONE\n    // user press Enter, change input textbox to <p></p>\n\n    const handleOnClickEdit = () => {\n        setIsEdit(true);\n    }\n\n    const handleChangeTodoData = (event, id) => {\n        const newData = event.target.value;\n        const copyDatabase = [...database];\n        let newDatabase = [];\n        for (let i = 0; i < copyDatabase.length; i++) {\n            if (copyDatabase[i].id === id) {\n                copyDatabase[i].data = newData;\n            }\n            newDatabase.push(copyDatabase[i]);\n        }\n        console.log(\"newData1\", newDatabase);\n        setDatabase(newDatabase)\n    }\n    const handlePressEnterKey = (event) => {\n        if (event.key === \"Enter\") setIsEdit(false)\n    }\n\n\n    return (\n        <div style={styles.container}>\n            <div style={styles.list}>\n                <input\n                    style={{ margin: '0', cursor: 'pointer' }}\n                    type='checkbox'\n                    checked={todo.isChecked}\n                    onChange={() => handleChangeCheckbox()} />\n                {isEdit ?\n                    <input\n                        style={styles.textbox}\n                        type=\"textbox\"\n                        value={todo.data}\n                        onChange={(event) => handleChangeTodoData(event, todo.id)}\n                        onKeyDown={(event) => handlePressEnterKey(event)} />\n                    :\n                    <div style={styles.p}>\n                        <p style={{ textDecoration: todo.isChecked === true ? 'line-through' : 'none' }}>{todo.data}</p>\n                    </div>\n                }\n            </div>\n            <div>\n                <button style={styles.button} onClick={() => handleOnClickEdit()}>\n                    <i className=\"fas fa-pencil-alt\" />\n                </button>\n                <button style={styles.button} onClick={() => handleDeleteTodo(todo.id)}>\n                    <i className=\"far fa-trash-alt\" />\n                </button>\n            </div>\n        </div>\n\n    )\n}\nconst styles = {\n    container: {\n        display: 'flex',\n        alignItems: 'center',\n        width: '100%',\n        justifyContent: 'space-between',\n        borderBottom: 'solid lightgrey 1px'\n    },\n    list: {\n        display: 'flex',\n        alignItems: 'center'\n    },\n    button: {\n        border: 'none',\n        color: 'lightgrey',\n        borderRadius: '5px',\n        fontSize: '20px',\n        margin: '2px',\n        padding: '5px',\n        cursor: 'pointer'\n    },\n    p: {\n        paddingLeft: '10px',\n        fontSize: '16px'\n    },\n    textbox: {\n        marginLeft: '10px',\n\n    }\n}\nexport default Todo;\n","import React from 'react';\n// import RemoveChecked from '../RemoveChecked';\nimport Todo from './Todo';\n\n\nfunction DisplayToDos({ database, setDatabase }) {\n    return (\n        <div style={styles.container}>\n            {database.map((item, index) => <Todo todo={item} key={index} database={database} setDatabase={setDatabase} />)}\n        </div>\n    )\n}\nconst styles = {\n    container: {\n        display: 'flex',\n        flexDirection: 'column'\n    }\n}\nexport default DisplayToDos\n","import DisplayToDos from './DisplayToDos';\n\nexport  default DisplayToDos;","import React from 'react';\n\nfunction RemoveCheckedTodos({ database, setDatabase }) {\n    // user click \"Remove Checked\" button\n    // check isChecked === true\n    // remove todo that isChecked === true \n    const handleRemoveAllChecked = () => {\n        const filteredTodos = database.filter(todo => !todo.isChecked);\n        setDatabase(filteredTodos);\n    }\n    return (\n        <div style={styles.container}>\n            <button style={styles.button} onClick={() => handleRemoveAllChecked()}>\n                <p style={styles.p}>Remove Checked Tasks</p>\n                <i className=\"fas fa-times\" />\n            </button>\n        </div >\n    )\n}\n\nconst styles = {\n    container: {\n        display: 'flex',\n        justifyContent: 'flex-end'\n    },\n    button: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        alignItems: 'center',\n        marginTop: '20px',\n        padding: '5px 10px',\n        color: 'white',\n        backgroundColor: '#4e93bd',\n        border: 'none',\n        cursor: 'pointer'\n    },\n    p: {\n        margin: '0',\n        paddingRight: '10px'\n    }\n}\nexport default RemoveCheckedTodos;","import RemoveCheckedTodos from './RemoveCheckedTodos'\n\nexport default RemoveCheckedTodos","import React, { useState, useEffect } from 'react';\nimport AddToDo from '../AddToDo';\nimport DisplayToDos from '../DisplayToDos';\nimport RemoveCheckedTodos from '../RemoveCheckedTodos';\n\n// click delete button\n// that todo will be removed from todo list(database)\nfunction TodoList() {\n    const [database, setDatabase] = useState([]);\n\n    useEffect(() => {\n        const database = JSON.parse(localStorage.getItem('database'));\n        if (database) {\n            setDatabase(database);\n        }\n    }, [])\n\n    useEffect(() => {\n        //save database while changing\n        localStorage.setItem('database', JSON.stringify(database));\n    }, [database]);\n\n\n    return (\n        <div style={styles.container}>\n            <AddToDo database={database} setDatabase={setDatabase} />\n            <DisplayToDos database={database} setDatabase={setDatabase} />\n            <RemoveCheckedTodos database={database} setDatabase={setDatabase} />\n        </div>\n    )\n}\n\nconst styles = {\n    container: {\n        display: 'flex',\n        flexDirection: 'column',\n        padding: '20px',\n        boxShadow: '2px 2px 5px grey',\n        background: 'white',\n        fontSize: '',\n        maxWidth: '450px',\n\n    }\n}\n\nexport default TodoList;\n\n","import TodoList from './TodoList'\n\nexport default TodoList;","import React from 'react';\nimport './App.css';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 style={styles.h1}>TODO LIST</h1>\n      <TodoList />\n    </div>\n  );\n}\n\nconst styles = {\n  h1: {\n    fontSize: '25px',\n    color: 'white',\n    textShadow: '2px 2px 5px grey'\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}